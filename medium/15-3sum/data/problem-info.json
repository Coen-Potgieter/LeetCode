{
    "questionId": "15",
    "title": "3Sum",
    "content": "<p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p>\n\n<p>Notice that the solution set must not contain duplicate triplets.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-1,0,1,2,-1,-4]\n<strong>Output:</strong> [[-1,-1,2],[-1,0,1]]\n<strong>Explanation:</strong> \nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,1,1]\n<strong>Output:</strong> []\n<strong>Explanation:</strong> The only possible triplet does not sum up to 0.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,0]\n<strong>Output:</strong> [[0,0,0]]\n<strong>Explanation:</strong> The only possible triplet sums up to 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 3000</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
    "difficulty": "Medium",
    "likes": 32038,
    "dislikes": 3007,
    "topicTags": [
        {
            "name": "Array"
        },
        {
            "name": "Two Pointers"
        },
        {
            "name": "Sorting"
        }
    ],
    "codeSnippets": [
        {
            "lang": "C++",
            "code": "class Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "code": "class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "code": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "code": "class Solution:\n    def threeSum(self, nums: List[int]) -> List[List[int]]:\n        "
        },
        {
            "lang": "C",
            "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** threeSum(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {\n    \n}"
        },
        {
            "lang": "C#",
            "code": "public class Solution {\n    public IList<IList<int>> ThreeSum(int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "code": "/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function(nums) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "code": "function threeSum(nums: number[]): number[][] {\n    \n};"
        },
        {
            "lang": "PHP",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[][]\n     */\n    function threeSum($nums) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "code": "class Solution {\n    func threeSum(_ nums: [Int]) -> [[Int]] {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "code": "class Solution {\n    fun threeSum(nums: IntArray): List<List<Int>> {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "code": "class Solution {\n  List<List<int>> threeSum(List<int> nums) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "code": "func threeSum(nums []int) [][]int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "code": "# @param {Integer[]} nums\n# @return {Integer[][]}\ndef three_sum(nums)\n    \nend"
        },
        {
            "lang": "Scala",
            "code": "object Solution {\n    def threeSum(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "code": "impl Solution {\n    pub fn three_sum(nums: Vec<i32>) -> Vec<Vec<i32>> {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "code": "(define/contract (three-sum nums)\n  (-> (listof exact-integer?) (listof (listof exact-integer?)))\n  )"
        },
        {
            "lang": "Erlang",
            "code": "-spec three_sum(Nums :: [integer()]) -> [[integer()]].\nthree_sum(Nums) ->\n  ."
        },
        {
            "lang": "Elixir",
            "code": "defmodule Solution do\n  @spec three_sum(nums :: [integer]) :: [[integer]]\n  def three_sum(nums) do\n    \n  end\nend"
        }
    ]
}