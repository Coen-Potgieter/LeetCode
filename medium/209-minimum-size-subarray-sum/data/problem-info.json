{
    "questionId": "209",
    "title": "Minimum Size Subarray Sum",
    "content": "<p>Given an array of positive integers <code>nums</code> and a positive integer <code>target</code>, return <em>the <strong>minimal length</strong> of a </em><span data-keyword=\"subarray-nonempty\"><em>subarray</em></span><em> whose sum is greater than or equal to</em> <code>target</code>. If there is no such subarray, return <code>0</code> instead.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 7, nums = [2,3,1,2,4,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The subarray [4,3] has the minimal length under the problem constraint.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 4, nums = [1,4,4]\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = 11, nums = [1,1,1,1,1,1,1,1]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution of which the time complexity is <code>O(n log(n))</code>.",
    "difficulty": "Medium",
    "likes": 13107,
    "dislikes": 474,
    "topicTags": [
        {
            "name": "Array"
        },
        {
            "name": "Binary Search"
        },
        {
            "name": "Sliding Window"
        },
        {
            "name": "Prefix Sum"
        }
    ],
    "codeSnippets": [
        {
            "lang": "C++",
            "code": "class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "code": "class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "code": "class Solution(object):\n    def minSubArrayLen(self, target, nums):\n        \"\"\"\n        :type target: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "code": "class Solution:\n    def minSubArrayLen(self, target: int, nums: List[int]) -> int:\n        "
        },
        {
            "lang": "C",
            "code": "int minSubArrayLen(int target, int* nums, int numsSize) {\n    \n}"
        },
        {
            "lang": "C#",
            "code": "public class Solution {\n    public int MinSubArrayLen(int target, int[] nums) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "code": "/**\n * @param {number} target\n * @param {number[]} nums\n * @return {number}\n */\nvar minSubArrayLen = function(target, nums) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "code": "function minSubArrayLen(target: number, nums: number[]): number {\n    \n};"
        },
        {
            "lang": "PHP",
            "code": "class Solution {\n\n    /**\n     * @param Integer $target\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function minSubArrayLen($target, $nums) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "code": "class Solution {\n    func minSubArrayLen(_ target: Int, _ nums: [Int]) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "code": "class Solution {\n    fun minSubArrayLen(target: Int, nums: IntArray): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "code": "class Solution {\n  int minSubArrayLen(int target, List<int> nums) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "code": "func minSubArrayLen(target int, nums []int) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "code": "# @param {Integer} target\n# @param {Integer[]} nums\n# @return {Integer}\ndef min_sub_array_len(target, nums)\n    \nend"
        },
        {
            "lang": "Scala",
            "code": "object Solution {\n    def minSubArrayLen(target: Int, nums: Array[Int]): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "code": "impl Solution {\n    pub fn min_sub_array_len(target: i32, nums: Vec<i32>) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "code": "(define/contract (min-sub-array-len target nums)\n  (-> exact-integer? (listof exact-integer?) exact-integer?)\n  )"
        },
        {
            "lang": "Erlang",
            "code": "-spec min_sub_array_len(Target :: integer(), Nums :: [integer()]) -> integer().\nmin_sub_array_len(Target, Nums) ->\n  ."
        },
        {
            "lang": "Elixir",
            "code": "defmodule Solution do\n  @spec min_sub_array_len(target :: integer, nums :: [integer]) :: integer\n  def min_sub_array_len(target, nums) do\n    \n  end\nend"
        }
    ]
}