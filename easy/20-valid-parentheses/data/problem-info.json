{
    "questionId": "20",
    "title": "Valid Parentheses",
    "content": "<p>Given a string <code>s</code> containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>\n\n<p>An input string is valid if:</p>\n\n<ol>\n\t<li>Open brackets must be closed by the same type of brackets.</li>\n\t<li>Open brackets must be closed in the correct order.</li>\n\t<li>Every close bracket has a corresponding open bracket of the same type.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;()[]{}&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;(]&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">false</span></p>\n</div>\n\n<p><strong class=\"example\">Example 4:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">s = &quot;([])&quot;</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">true</span></p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of parentheses only <code>&#39;()[]{}&#39;</code>.</li>\n</ul>\n",
    "difficulty": "Easy",
    "likes": 25022,
    "dislikes": 1842,
    "topicTags": [
        {
            "name": "String"
        },
        {
            "name": "Stack"
        }
    ],
    "codeSnippets": [
        {
            "lang": "C++",
            "code": "class Solution {\npublic:\n    bool isValid(string s) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "code": "class Solution {\n    public boolean isValid(String s) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "code": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "code": "class Solution:\n    def isValid(self, s: str) -> bool:\n        "
        },
        {
            "lang": "C",
            "code": "bool isValid(char* s) {\n    \n}"
        },
        {
            "lang": "C#",
            "code": "public class Solution {\n    public bool IsValid(string s) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar isValid = function(s) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "code": "function isValid(s: string): boolean {\n    \n};"
        },
        {
            "lang": "PHP",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function isValid($s) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "code": "class Solution {\n    func isValid(_ s: String) -> Bool {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "code": "class Solution {\n    fun isValid(s: String): Boolean {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "code": "class Solution {\n  bool isValid(String s) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "code": "func isValid(s string) bool {\n    \n}"
        },
        {
            "lang": "Ruby",
            "code": "# @param {String} s\n# @return {Boolean}\ndef is_valid(s)\n    \nend"
        },
        {
            "lang": "Scala",
            "code": "object Solution {\n    def isValid(s: String): Boolean = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "code": "impl Solution {\n    pub fn is_valid(s: String) -> bool {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "code": "(define/contract (is-valid s)\n  (-> string? boolean?)\n  )"
        },
        {
            "lang": "Erlang",
            "code": "-spec is_valid(S :: unicode:unicode_binary()) -> boolean().\nis_valid(S) ->\n  ."
        },
        {
            "lang": "Elixir",
            "code": "defmodule Solution do\n  @spec is_valid(s :: String.t) :: boolean\n  def is_valid(s) do\n    \n  end\nend"
        }
    ]
}