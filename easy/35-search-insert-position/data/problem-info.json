{
    "questionId": "35",
    "title": "Search Insert Position",
    "content": "<p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>\n\n<p>You must&nbsp;write an algorithm with&nbsp;<code>O(log n)</code> runtime complexity.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 5\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 2\n<strong>Output:</strong> 1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,6], target = 7\n<strong>Output:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> contains <strong>distinct</strong> values sorted in <strong>ascending</strong> order.</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
    "difficulty": "Easy",
    "likes": 16869,
    "dislikes": 792,
    "topicTags": [
        {
            "name": "Array"
        },
        {
            "name": "Binary Search"
        }
    ],
    "codeSnippets": [
        {
            "lang": "C++",
            "code": "class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "code": "class Solution {\n    public int searchInsert(int[] nums, int target) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "code": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "code": "class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:\n        "
        },
        {
            "lang": "C",
            "code": "int searchInsert(int* nums, int numsSize, int target) {\n    \n}"
        },
        {
            "lang": "C#",
            "code": "public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "code": "function searchInsert(nums: number[], target: number): number {\n    \n};"
        },
        {
            "lang": "PHP",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "code": "class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "code": "class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "code": "class Solution {\n  int searchInsert(List<int> nums, int target) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "code": "func searchInsert(nums []int, target int) int {\n    \n}"
        },
        {
            "lang": "Ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n    \nend"
        },
        {
            "lang": "Scala",
            "code": "object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "code": "impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "code": "(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"
        },
        {
            "lang": "Erlang",
            "code": "-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  ."
        },
        {
            "lang": "Elixir",
            "code": "defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend"
        }
    ]
}