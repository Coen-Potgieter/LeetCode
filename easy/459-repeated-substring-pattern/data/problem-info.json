{
    "questionId": "459",
    "title": "Repeated Substring Pattern",
    "content": "<p>Given a string <code>s</code>, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abab&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;ab&quot; twice.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aba&quot;\n<strong>Output:</strong> false\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcabcabc&quot;\n<strong>Output:</strong> true\n<strong>Explanation:</strong> It is the substring &quot;abc&quot; four times or the substring &quot;abcabc&quot; twice.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n",
    "difficulty": "Easy",
    "likes": 6525,
    "dislikes": 538,
    "topicTags": [
        {
            "name": "String"
        },
        {
            "name": "String Matching"
        }
    ],
    "codeSnippets": [
        {
            "lang": "C++",
            "code": "class Solution {\npublic:\n    bool repeatedSubstringPattern(string s) {\n        \n    }\n};"
        },
        {
            "lang": "Java",
            "code": "class Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        \n    }\n}"
        },
        {
            "lang": "Python",
            "code": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "
        },
        {
            "lang": "Python3",
            "code": "class Solution:\n    def repeatedSubstringPattern(self, s: str) -> bool:\n        "
        },
        {
            "lang": "C",
            "code": "bool repeatedSubstringPattern(char* s) {\n    \n}"
        },
        {
            "lang": "C#",
            "code": "public class Solution {\n    public bool RepeatedSubstringPattern(string s) {\n        \n    }\n}"
        },
        {
            "lang": "JavaScript",
            "code": "/**\n * @param {string} s\n * @return {boolean}\n */\nvar repeatedSubstringPattern = function(s) {\n    \n};"
        },
        {
            "lang": "TypeScript",
            "code": "function repeatedSubstringPattern(s: string): boolean {\n    \n};"
        },
        {
            "lang": "PHP",
            "code": "class Solution {\n\n    /**\n     * @param String $s\n     * @return Boolean\n     */\n    function repeatedSubstringPattern($s) {\n        \n    }\n}"
        },
        {
            "lang": "Swift",
            "code": "class Solution {\n    func repeatedSubstringPattern(_ s: String) -> Bool {\n        \n    }\n}"
        },
        {
            "lang": "Kotlin",
            "code": "class Solution {\n    fun repeatedSubstringPattern(s: String): Boolean {\n        \n    }\n}"
        },
        {
            "lang": "Dart",
            "code": "class Solution {\n  bool repeatedSubstringPattern(String s) {\n    \n  }\n}"
        },
        {
            "lang": "Go",
            "code": "func repeatedSubstringPattern(s string) bool {\n    \n}"
        },
        {
            "lang": "Ruby",
            "code": "# @param {String} s\n# @return {Boolean}\ndef repeated_substring_pattern(s)\n    \nend"
        },
        {
            "lang": "Scala",
            "code": "object Solution {\n    def repeatedSubstringPattern(s: String): Boolean = {\n        \n    }\n}"
        },
        {
            "lang": "Rust",
            "code": "impl Solution {\n    pub fn repeated_substring_pattern(s: String) -> bool {\n        \n    }\n}"
        },
        {
            "lang": "Racket",
            "code": "(define/contract (repeated-substring-pattern s)\n  (-> string? boolean?)\n  )"
        },
        {
            "lang": "Erlang",
            "code": "-spec repeated_substring_pattern(S :: unicode:unicode_binary()) -> boolean().\nrepeated_substring_pattern(S) ->\n  ."
        },
        {
            "lang": "Elixir",
            "code": "defmodule Solution do\n  @spec repeated_substring_pattern(s :: String.t) :: boolean\n  def repeated_substring_pattern(s) do\n    \n  end\nend"
        }
    ]
}